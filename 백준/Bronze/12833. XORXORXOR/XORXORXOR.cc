#include <iostream>
using namespace std;

int main() {
        int a, b, c, d; cin >> a >> b >> c;
        d = a ^ b;
        if (c & 1) { cout << d; }                // [1 byte = 8 bit] 0000 000'0' 자리가 있다고 한다면                    // 2^0 = 1
        else { cout << a; }                      // 가장 첫 번째 자리 비트가 ' 1 ' 인지 검증하는 방식으로 홀수 짝수 구분
        return 0;
}
/* ■ 설명 ■
비트마스킹의 알고리즘에 온 것을 환영하며,

[연산자] / [기능]
    &   : 비트 단위로 ' AND ' 연산
    |   : 비트 단위로 ' OR ' 연산
    ^   : 비트 단위로 ' XOR ' 연산
    ~   : 단항 연산자이며, 피연산자의 모든 비트를 반전 (뒤집다.)        // All ' NOT '
    <<  : 피연산자의 모든 비트 열을 왼쪽으로 이동
    >>  : 피연산자의 모든 비트 열을 오른쪽으로 이동
===================================================================
그렇다면 왜 굳이 홀수 짝수에 따라 비트 마스킹 연산을 하였느냐.
' XOR ' 를 2번 뒤집으면 원래의 수로 돌아오기 때문에

[c]의 입력 값 만큼 반복하는 것 보단, 그 값이 홀수냐 짝수냐에 따라
한번 연산만 해주면 되기 때문이다.
*/
