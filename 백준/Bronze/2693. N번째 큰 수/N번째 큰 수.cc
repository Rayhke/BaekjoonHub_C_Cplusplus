#include <iostream>
using namespace std;

int main() {
	int a[10][1000] = {}, b, c, d;
	cin >> b;
	for (int n = 0; n < b; n++) { for (int m = 0; m < 10; m++) { cin >> a[m][n]; } }
	for (int n = 0; n < b; n++) {
		for (int m = 0; m < 10; m++) {
			c = m;
			for (int l = m + 1; l < 10; l++) {
				if (a[c][n] < a[l][n]) { c = l; }	// 배열 중에서 가장 작은 값이 담긴 자릿값 찾기
			}
			d = a[m][n];
			a[m][n] = a[c][n];
			a[c][n] = d;
		}
	}
	for (int n = 0; n < b; n++) { cout << a[2][n] << endl; }
	return 0;
}
/* ■ 설명 ■
행 : 가로 (↕높이) / 열 : 세로 (↔길이) / 행 단위 기준으로 한 방법이 정석적이지만,
본인이 알아보기 편하게 하기 위해서, 열 단위 기준으로 (x축, y축) 작성하여도 문젠 없지만

만약 2차원 배열에 값을 미리 담겠다면,
[int a[2][3] = {{1, 2, 3}, {4, 5, 6}};] 이런 식으로 담아야 한다.
행 단위가 정석이기 때문이다.

추가로 1차원 배열 순서를 2차원 배열 순번으로 찾고자 한다면,
행 번호 = (자릿값 / 열 갯수) + 1
열 번호 = (자릿값 % 열 개수) + 1

(예시)
int a[6][4], b[24]
배열 a, b 에 순서대로 1 ~ 24 값 대입 했다 가정하고
배열 b가 20이 담긴 위치를 배열 a에서 찾고자 한다면,
b[19] = 20 이고,

(19(자릿값) / 4(2차원 배열의 행 갯수)) + 1 = 4 + 1 = 5행
(19(자릿값) % 4(2차원 배열의 행 갯수)) + 1 = 1 + 1 = 2열

즉, 배열 a[5][2] = 20 이다는 것을 알 수 있다.
*/
