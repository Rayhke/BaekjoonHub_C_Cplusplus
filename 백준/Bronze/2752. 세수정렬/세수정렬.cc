#include <iostream>
using namespace std;

int main() {
	int a, b, c, d, e;
	cin >> a >> b >> c;
	if (a == b && a == c && b == c) { cout << a << " " << b << " " << c << endl;}	// a, b, c 가 모두 동일할 때, 그대로 출력
	else {
		d = (a > b) ? a : b; d = (d > c) ? d : c;				// a, b, c 중에 가장 큰 값을 찾아서 담기
		e = (a < b) ? a : b; e = (e < c) ? e : c;				// a, b, c 중에 가장 작은 값을 찾아서 담기
		cout << e << " " << ((a + b + c) - (d + e)) << " " << d << endl;	// 왜 이렇게 썼느냐? ((a + b + c) - (d + e)) 아래 설명 참고.
	}
	return 0;
}
/* ■ 설명 ■
앞전에 풀은 오답은 백준에선 정답 처리가 되었으나,
실제론 [2 2 1] 을 입력 받으면 [1 1 2] 로 출력되는 문제점을 찾았고,
모든 경우의 수를 다 고려하여

d 는 [a, b, c] 중에 가장 크거나 같은 어떠한 값을 단, 하나만 담을 것이고,
e 는 [a, b, c] 중에 가장 작거나 같은 어떠한 값을 단, 하나만 담는 것을 알기에
역으로 선택되지 않은 값을 찾기 위해서, [a + b + c] 에다가 [d + e] 를 뺀다면,
어찌 되었든 간에 선택받지 못한 값만 반드시 남기에 오류가 날 변수가 없을 것.

그리고... 괜히 무리하게 코드를 최소화 하려 하지 말고,			// 특히 삼문항으로 인해 좀 헤매었다.
정 모르겠으면, 모든 경우의 수를 고려하여 최대한 작성한 뒤에
불 필요한 부분을 검증해가며 차례대로 줄여갈 것...
이 쉬운 문제를 코드를 최소화 에 매달린 탓에, 여러 번 틀린 것이 아깝다..
*/
