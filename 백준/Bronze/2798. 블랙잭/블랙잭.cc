#include <iostream>
using namespace std;

int main() {
	int a[100] = {}, b, c, d = 0, e = 0, N, M;
	cin >> N >> M;
	for (int n = 0; n < N; n++) { cin >> a[n]; }			// 최댓값을 빠르게 찾을 경우 아래에서 시작하는 것 보단
	for (int n = 0; n < N - 1; n++) {				// 위로 시작하는 것이 빠르기에, 우선 내림차순으로 정렬한다.
		b = n;
		for (int m = n + 1; m < N; m++) {
			if (a[b] < a[m]) { b = m; }
		}
		c = a[n];
		a[n] = a[b];
		a[b] = c;
	}
	for (int n = 0; n < N; n++) {
		for (int m = n + 1; m < N; m++) {
			for (int l = m + 1; l < N; l++) {					// (큰 값으로 부터 시작 했기에 계속 더해질 것이다.)
				d = a[n] + a[m] + a[l];			// 큰 값 부터 더하는 방식으로 경우의 수를 전부 대입하고,   ↙
				if (d <= M && e < d) { e = d; }		// [M] 보단 작거나 같으면서도, 최댓값 [d] 보다 크면 값 대입		
				else if (e > d) { break; }		// 그러다가 만약, 최댓값 [d] 보다 작은 경우의 수만 남으면 비로소 종료한다.
			}
		}
	}
	if (e != 0) { cout << e; }
	return 0;
}
/* ■ 설명 ■
블랙잭의 룰을 따라가며, 무조건 3장의 카드를 중복 없이 선택하여
그 카드들의 값을 합쳐서, [M] 보다 작거나 같아야 하며 초과해서는 안된다.

그렇다면 그 중에서 [M] 를 초과하지 않으면서,
카드 3장의 값 조합들 중에 가장 [M] 값에 근접한(큰) 값 [d] 을 출력한다.
=============================================================================
우선 배열 [int a[n]] 에 담긴 값을 오름차순으로 정렬한다.
그 다음, 오름차순으로 3장의 카드를 고르는 경우의 수를 다 검증하며
[M] 값 보다 작거나 같지만, 그 중에서 최댓값 [d] 보다 큰 값임을 해당하는 경우

최댓값 [d] 를 갱신하며, 그렇게 조합을 찾아가다
카드 3장의 경우의 수 조합들 중에 더 이상

최댓값보다 크지 않고, 작은 경우의 수 들만 남았다면,
카드 탐색 (3중 [for] 문) 반복문 을 종료하고, 최댓값 [d] 를 출력한다.
*/
