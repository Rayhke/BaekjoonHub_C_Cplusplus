#include <iostream>
using namespace std;

int main() {
	int a[10] = {}, b, c, d = -1; string s;
	cin >> s;
	for (int n = 0; s[n] != '\0'; n++) { b = s[n] - '0'; a[b]++; }	// 이렇게 설계한 이유는 - ◆ 해설 1 ◆ 참고
	b = a[6] + a[9]; c = (b / 2) + (b % 2);				// 이렇게 설계한 이유는 - ◆ 해설 2 ◆ 참고
	for (int n = 0; n < 10; n++) {
		if (n == 6 || n == 9 || d >= a[n]) { continue; }
		else if (d < a[n]) { d = a[n]; }
	}
	if (c < d) { cout << d; }
	else { cout << c; }
	return 0;
}
/* ■ 설명 ■
한 상자에 0 ~ 9 숫자 모양의 자석이 각각 하나 씩
세트로 있다고 해보자.

0 1 2 3 4 5 7 8 은 하나 씩 존재하지만,
6 9 는 서로 뒤집어서 사용해도 무방하다.

그렇다면 위의 숫자 모양 자석을 이용해서
주어진 호수 번호를 만들고자 한다면,
숫자 모양 자석이 몇 세트가 필요한지 출력한다.
================================================================
◆ 해설 1 ◆
처음 [string s] 에 문자열을 입력 받고, 그것을 [int] 형 숫자로
변환하는 동시에, 변환된 값을 [b] 에 담아서 자릿값으로 활용한다.

그리고 배열 [int a[b]] 자리에 ' 1 ' 을 더 해주면,
특정 숫자를 사용한 횟수를 카운트 할 수 있다.
================================================================
◆ 해설 2 ◆
' 6 ' 과 ' 9 ' 는 서로 호환이 되기 때문에 다른 숫자와 달리	    // 사람마다 해석하기에 따라서 한 상자에
한 상자에 사실 똑같은 숫자가 2개 씩 있는 것과 마찬가지다.	// ' 6 ' 이 2개, ' 9 ' 가 2개 있다고도 할 수 있다.

그렇다면, ' 6 ' 과 ' 9 ' 의 사용 횟수를 합쳐서		// (6 과 9 사용 횟수 / 2) + (6 과 9 사용 횟수 % 2) = 필요한 숫자 세트 갯수
보는 것이 가장 빠를 것 이다.
================================================================
(예시)
[string s] 에 ' 99999 ' 문자열을 입력 받았다면,
상자 한 세트에 ' 6 ' 과 ' 9 ' 를 사용하여서 ' 99 ' 로 갖다 붙이고
남은 ' 999 ' 문자열은

두 상자를 더 까서 ' 6 ' 2개, ' 9 ' 1개 or ' 6 ' 1개, ' 9 ' 2개로
조합하면 된다.
*/
