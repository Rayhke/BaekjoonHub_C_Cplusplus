#include <iostream>
using namespace std;

int main() {
	int N, M = 1e8, L = 9, P = 0; cin >> N;
	while (1) {
		if (M <= N) { P += (N - M + 1) * L; break; }
		M /= 10; L--;
	}
	M /= 10; L--;
	for (int m = M; m > 0; m /= 10) { P += 9 * m * L; L--; }
	cout << P;
	return 0;
}
/* ■ 설명 ■
위의 계산 패턴을 찾기 위해 했던 고생들

============================================================================
[1번 시도] - 무작정 구현을 시도한 것

int a, b = 0;
cin >> a;
for (int n = 1; n <= a; n++) {
	if (n < 10) { b = b + 1; }
	else if (n < 100) { b = b + 2; }
	else if (n < 1000) { b = b + 3; }
	else if (n < 10000) { b = b + 4; }
	else if (n < 100000) { b = b + 5; }
	else if (n < 1000000) { b = b + 6; }
	else if (n < 10000000) { b = b + 7; }
	else if (n < 100000000) { b = b + 8; }
	else if (n < 1000000000) { b = b + 9; }
}
cout << b;
============================================================================
[2번 시도] - 계산 규칙을 찾아낸 후, 시행한 방법

int N, M, L = 0; cin >> N;
if (1e8 == N) { cout << 788888898; }
else if (1e7 <= N) {
	M = (N - 1e7 + 1) * 8;
	L += 9 + 180 + 2700 + 36000 + 450000 + 5400000 + 63000000 + M;
}
else if (1e6 <= N) {
	M = (N - 1e6 + 1) * 7;
	L += 9 + 180 + 2700 + 36000 + 450000 + 5400000 + M;
}
else if (1e5 <= N) {
	M = (N - 1e5 + 1) * 6;
	L += 9 + 180 + 2700 + 36000 + 450000 + M;
}
else if (1e4 <= N) {
	M = (N - 1e4 + 1) * 5;
	L += 9 + 180 + 2700 + 36000 + M;
}
else if (1e3 <= N) {
	M = (N - 1e3 + 1) * 4;
	L += 9 + 180 + 2700 + M;
}
else if (1e2 <= N) {
	M = (N - 1e2 + 1) * 3;
	L += 9 + 180 + M;
}
else if (1e1 <= N) {
	M = (N - 1e1 + 1) * 2;
	L += 9 + M;
}
else { L = N; }
cout << L;
*/
